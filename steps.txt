DevOps-Project-with-Jenkins-Maven-SonaQube-Docker-and-EKS

Steps:
A. Install and Conigure Jenkins-Master and Jenkins-Agent
1. Setup Jenkins-Master
    a. Launch Jenkins-Master in EC2
        > Ubuntu
        > t2.micro
        > 15GiB storage (atleast)
    b. Connect via SSH or EC2 Instance Connect (to update hostname)
        1. sudo apt update
        2. sudo apt upgrade
        3. sudo nano /etc/hostname (update hostname to jenkins-master)
        4. cat /etc/hostname (check if hostname is updated)
        5. sudo init 6 (reboot)
    c. Install Java
        6. sudo apt install openjdk-17-jre
        7. java --version (check if java is installed)
    d. Install Jenkins
        8. Update security group to allow port 8080 inbound
        9. Get copy weekly release from: https://www.jenkins.io/doc/book/installing/linux/
            sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
                https://pkg.jenkins.io/debian/jenkins.io-2023.key
            echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc]" \
                https://pkg.jenkins.io/debian binary/ | sudo tee \
                /etc/apt/sources.list.d/jenkins.list > /dev/null
            sudo apt-get update
            sudo apt-get install jenkins
        10. jenkins --version (check if jenkins is installed)
        11. sudo systemctl enable jenkins (start jenkins service on boot)
        12. sudo systemctl start jenkins (start jenkins service)
        13. systemctl status jenkins (check if jenkins service is running)
    e. Allow SSH
        1. sudo nano /etc/ssh/sshd_config (update sshd_config to allow port 22)
        2. Uncomment PubkeyAuthentication yes
        3. Uncomment AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2

2. Setup Jenkins-Agent
    a. Do steps a-c from "Setup Jenkins-Master"
    d. Install Docker
        1. sudo apt-get install docker.io
        2. docker --version (check if docker is installed)
        3. sudo usermod -aG docker $USER (add ubuntu to docker group)
        4. groups username (check if docker group is added)
        5. sudo init 6 (reboot)

3. Allow SSH
    a. sudo nano /etc/ssh/sshd_config (update sshd_config to allow port 22)
    b. Uncomment PubkeyAuthentication yes
    c. Uncomment AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2
    d. sudo systemctl reload ssh (reload ssh service)
    e. Do steps a-c to Jenkins-Master and Jenkins-Agent EC2 instance
    f. Go to Jenkins-Master EC2 instance 
    g. ssh-keygen (generate ssh key) [Note: Just press enter for all questions]
    h. cd .ssh (move to ssh directory)
    i. copy the contents of id_rsa.pub
    j. Go to Jenkins-Agent EC2 instance
    k. cd .ssh (move to ssh directory)
    l. sudo nano authorized_keys (add the contents of id_rsa.pub)
    m. cat authorized_keys (check if authorized_keys is updated)

4. Open Jenkins-Master 
    a. <public-ip>:8080 (open in browser)
    b. sudo cat /var/lib/jenkins/secrets/initialAdminPassword (get password)
    c. login using the password
    d. Install Suggested Plugins
    e. Fill in the details
        1. username (e.g. clouduser)
        2. password (e.g. clouduser)
        3. full name
        4. password 
    
5. Setup Node
    a. Manage Jenkins -> Nodes -> Built-In Node -> Configure -> Number of executors -> 0 -> Save
    b. Nodes -> New Node -> put "Jenkins-Agent" -> Tick "Permanent Agent" -> Create
    c. Add Details:
        1. Number of executors: 2
        2. Remote root directory: /home/ubuntu
        3. Labels: "Jenkins-Agent"
        4. Usage: "Use this node as much as possible"
        5. Launch method: "Launch agents via SSH"
        6. Host: <private-ip of Jenkins-Agent>
        7. Credentials:
            > Add -> Jenkins
            > Domain: Global credentials
            > Kind: SSH Username with private key
            > ID: jenkins-agent
            > Description: Jenkins-Agent
            > Username: ubuntu
            > Private key: Enter directly
                > Go to Jenkins-Master
                > cd .ssh
                > cat id_ed25519
                > Copy the contents
            > Save
            > Select the newly created Jenkins-Agent
        8. Host Key Verification Strategy: "Non verifying Verification Strategy"
        9. Save
    d. Test
        1. Dashboard -> Create job -> put "Test" -> click Pipeline -> Click OK
        2. Pipeline Script -> Hello World -> Apply -> Save -> Build Now


B. Install Maven to Jenkins and Add Github Credentials to Jenkins
1. Install Maven and Eclipse Plugins 
    a. Manage Jenkins -> Plugins -> Available Plugins >  Search "Maven" then "Eclipse"
        > Maven Integration
        > Pipeline Maven Integration
        > Eclipse Temurin Installer
    b. Manage Jenkins -> Tools -> Maven Installations
        1. Name: Maven3
        2. Install automatically: (ticked)
        3. Version: 3.9.9
        4. Apply and Save
    c. Manage Jenkins -> Tools > JDK Installations
        1. Name: Java17
        2. Install automatically: (ticked)
        3. Add Installer: Install from adoptium.net
        4. Version: jdk-17.0.5+8
        5. Apply and Save
2. Add Github Credentials to Jenkins
    a. Manage Jenkins -> Credentials -> Add Credentials
        1. Kind: Username with password
        2. Scope: Globa (Jenkins, nodes, items, all child item, etc)
        3. Username: <github username>
        4. password: <github password or token>
        5. ID: e.g. github
        6. Description: e.g. github
        7. Create


C. Create Pipeline Script(Jenkinsfile) for Built & Test Artifacts and Create CI Job on Jenkins
1. Create Jenkinsfile
    > pipeline { }

2. Setup Agent
    > agent { label '<agent-name>'} e.g. agent { label 'jenkins-agent' }

3. Setup Stages
    > stages{ 
        stage ("<stage-name>") {
            steps {
                <stage-script>
            }
        }
    }
    > Cleanup Workspace
    > Checkout from SCM
    > Build Application
    > Test Application

4. Build Pipeline
    a. Build -> New Item -> Enter <pipeline-name> -> Pipeline -> OK
    b. Pipeline
        1. Definition: Pipeline Script from SCM
        2. SCM: Git
        3. Repository URL: https://github.com/LesterBryanIlao/register-app
        4. Credentials: github
        5. Branch Specifier: */main
        6. Script Path: Jenkinsfile
    c. Build Now


D. Setup of EC2 Instance for SonarQube
1. Launch SonarQube in EC2
    > Ubuntu
    > t3.medium (aleast)
    > 15GiB storage (atleast)

2. Connect via SSH or EC2 Instance Connect (to update hostname)
    a. sudo apt update
    b. sudo apt upgrade

3. Add PostgresSQL repository 
    a. sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    b. wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null

4. Install PostgreSQL
    a. sudo apt update
    b. sudo apt-get -y install postgresql postgresql-contrib
    c. sudo systemctl enable postgresql (start postgresql service on boot)

5. Create Database for Sonarqube
    a. sudo passwd postgres
    b. Setup password
    c. su - postgres (login as postgres)
    d. createuser sonar
    e. psql 
    f. ALTER USER sonar WITH ENCRYPTED password 'sonar';
    g. CREATE DATABASE sonarqube OWNER sonar;
    h. grant all privileges on DATABASE sonarqube to sonar;
    i. \q
    j. exit

6. Add Adoptium repository
    a. sudo bash
    b. wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
    c. echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list

7. Install Java 17
    a. apt update
    b. apt install temurin-17-jdk
    c. update-alternatives --config java
    d. /usr/bin/java --version
    e. exit 

8. Linux Kernel Tuning
    a. sudo nano /etc/security/limits.conf (Increase Limits)
    b. //Paste the below values at the bottom of the file
        sonarqube   -   nofile   65536
        sonarqube   -   nproc    4096

    c. sudo nano /etc/sysctl.conf (Increase Mapped Memory Regions)
    d. vm.max_map_count = 262144 // (Paste the below values at the bottom of the file)
    e. sudo init 6 (reboot)

9. Update Security Group to allow port 9000 inbound


E. Sonarqube Installation
1. Connect to SonaQube instance

2. Download and install Sonarqube
    a. sudo wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.0.65466.zip
    b. sudo apt install unzip
    c. sudo unzip sonarqube-9.9.0.65466.zip -d /opt
    d. sudo mv /opt/sonarqube-9.9.0.65466 /opt/sonarqube (rename the folder)

3. Create user and set permissions
    a. sudo groupadd sonar (create new group)
    b. sudo useradd -c "user to run SonarQube" -d /opt/sonarqube -g sonar sonar
        Purpose: 
        Creates a new user named "sonar" with the following attributes:
        -c "user to run SonarQube": Sets the user's comment or description.
        -d /opt/sonarqube: Sets the user's home directory to /opt/sonarqube.
        -g sonar: Assigns the user to the "sonar" group.
        sonar: Specifies the username
    c. id sonar (verify user)
    d. sudo chown sonar:sonar /opt/sonarqube -R
        > Changes the ownership of the /opt/sonarqube directory and all its contents to the "sonar" user and group. 
        > This ensures that the SonarQube user has full access to its files and directories.

4. Update Sonarqube properties with DB credentials
    a. sudo nano /opt/sonarqube/conf/sonar.properties
    b. Find and replace the below values, you might need to add the sonar.jdbc.url
    sonar.jdbc.username=sonar
    sonar.jdbc.password=sonar
    sonar.jdbc.url=jdbc:postgresql://localhost:5432/sonarqube

5. Create service for Sonarqube
    a. sudo nano /etc/systemd/system/sonar.service
    b. Paste the below into the file

    # Metadata and dependencies for the service.
    [Unit] 
    Description=SonarQube service
    # Ensures the service starts after the system logger and network are available.
    After=syslog.target network.target 

    # Defines how the service runs.
    [Service]
    Type=forking

    # Commands to start and stop SonarQube using its bundled script.
    ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
    ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop

    # Ensures SonarQube runs as the sonar user and group for security.
    User=sonar
    Group=sonar

    # Restarts the service if it fails.
    Restart=always

    # Increases the number of open files (required for SonarQube).
    LimitNOFILE=65536
    # Sets the maximum number of processes the service can use.
    LimitNPROC=4096

    # Ensures the service is enabled at boot under the multi-user target.
    [Install]
    WantedBy=multi-user.target

6. Start Sonarqube and Enable service
    a. sudo systemctl start sonar
    b. sudo systemctl enable sonar
    c. sudo systemctl status sonar

7. Watch log files and monitor for startup
    a. sudo tail -f /opt/sonarqube/logs/sonar.log

8. Access Sonarqube and Update Login Credentials
    a. <public-ip>:9000
    b. username: admin; password: admin
    c. Update the password
        > username: admin
        > password: admin123
